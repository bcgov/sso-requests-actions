"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.arg = exports.Argument = void 0;
const Util_1 = require("../Util");
/**
 * @category Argument
 */
class Argument {
    /**
     * Construct argument.
     *
     * @param arg argument as string or copy from another argument object
     */
    constructor(arg) {
        if (!arg || (typeof arg === 'string' && !arg.trim())) {
            throw new Error('Argument cannot be empty.');
        }
        this.argument = arg;
    }
    /**
     * Get argument's attribute.
     *
     * @param name attribute name
     */
    attr(name) {
        name = name.trim();
        if (this.argument instanceof Argument) {
            return this.argument.attr(name);
        }
        return new Argument(`${this.argument}.${name}`);
    }
    /**
     * Get list argument's element.
     *
     * @param idx element index
     */
    element(idx) {
        if (this.argument instanceof Argument) {
            return this.argument.element(idx);
        }
        return new Argument(`${this.argument}[${idx}]`);
    }
    /**
     * To Terraform representation.
     *
     * Use this method when argument is used as an interpolation in another Terraform argument or code.
     */
    toTerraform() {
        let str = '';
        if (this.argument instanceof Argument) {
            str += this.argument.toTerraform();
        }
        else {
            str += this.argument;
        }
        return Util_1.Util.escape(str);
    }
    /**
     * To string.
     *
     * Use this method when argument is used as an interpolation in a Terraform string or heredoc.
     *
     * It is automatically called when argument is used in template literal.
     */
    toString() {
        return `\${${this.toTerraform()}}`;
    }
}
exports.Argument = Argument;
/**
 * Convenient function to construct new [[Argument]].
 *
 * @param arg argument as string or copy from another argument object
 *
 * @category Argument
 */
const arg = (arg) => new Argument(arg);
exports.arg = arg;
