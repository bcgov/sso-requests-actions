"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _a, _Attribute_constructArgument;
Object.defineProperty(exports, "__esModule", { value: true });
exports.attr = exports.Attribute = void 0;
const _1 = require(".");
/**
 * @category Argument
 */
class Attribute extends _1.Argument {
    /**
     * Construct block's attribute.
     *
     * @param block block
     * @param attrName attribute name
     */
    constructor(block, attrName) {
        super(__classPrivateFieldGet(Attribute, _a, "m", _Attribute_constructArgument).call(Attribute, block, attrName));
    }
}
exports.Attribute = Attribute;
_a = Attribute, _Attribute_constructArgument = function _Attribute_constructArgument(block, attrName) {
    if (!block) {
        throw new Error('Attribute block cannot be null.');
    }
    if (!attrName || !attrName.trim()) {
        throw new Error('Attribute name cannot be empty.');
    }
    return `${block.asArgument().toTerraform()}.${attrName.trim()}`;
};
/**
 * Convenient function to construct new block's [[Attribute]].
 *
 * @param block block
 * @param name attribute name
 *
 * @category Argument
 */
const attr = (block, name) => new Attribute(block, name);
exports.attr = attr;
