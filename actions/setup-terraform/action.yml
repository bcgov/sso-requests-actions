name: "Setup Terraform"
description: "Setup SSO Terraform workspace"

inputs:
  context:
    description: "Terraform workspace directory"
    required: false
    default: .
  tf-version:
    description: "Terraform version"
    required: true
  tf-s3-bucket:
    description: "Terraform S3 Remote backend bucket name"
    required: true
  tf-s3-bucket-key:
    description: "Terraform S3 Remote backend bucket key (path)"
    required: true
  tf-s3-dynamodb-table:
    description: "Terraform S3 Remote backend DynamoDB table"
    required: true
  tf-s3-access-key:
    description: "AWS access key to access Terraform S3 Bucket"
    required: true
  tf-s3-secret-key:
    description: "AWS secret key to access Terraform S3 Bucket"
    required: true
  tf-s3-role-arn:
    description: "Amazon Resource Name (ARN) of the IAM Role to access Terraform S3 Bucket"
    required: true
  kc-provider-version:
    description: "Keycloak Terraform provider version"
    required: true
  kc-dev-url:
    description: "Keycloak url in customer dev environment"
    required: true
  kc-test-url:
    description: "Keycloak url in customer test environment"
    required: true
  kc-prod-url:
    description: "Keycloak url in customer prod environment"
    required: true
  kc-dev-secret:
    description: "Keycloak client secret in customer dev environment"
    required: true
  kc-test-secret:
    description: "Keycloak client secret in customer test environment"
    required: true
  kc-prod-secret:
    description: "Keycloak client secret in customer prod environment"
    required: true
  test-siteminder-signing-certificate:
    description: "Siteminder signing certificate in test environment"
    required: false
    default: ""
  prod-siteminder-signing-certificate:
    description: "Siteminder signing certificate in prod environment"
    required: false
    default: ""

  dev-azureidir-tenant-id:
    description: "Azure IDIR Tenant ID in dev environment"
    required: false
    default: ""
  dev-azureidir-client-id:
    description: "Azure IDIR Client ID in dev environment"
    required: false
    default: ""
  dev-azureidir-client-secret:
    description: "Azure IDIR Client Secret in dev environment"
    required: false
    default: ""
  dev-github-client-id:
    description: "GitHub Client ID in dev environment"
    required: false
    default: ""
  dev-github-client-secret:
    description: "GitHub Client Secret in dev environment"
    required: false
    default: ""
  test-azureidir-tenant-id:
    description: "Azure IDIR Tenant ID in test environment"
    required: false
    default: ""
  test-azureidir-client-id:
    description: "Azure IDIR Client ID in test environment"
    required: false
    default: ""
  test-azureidir-client-secret:
    description: "Azure IDIR Client Secret in test environment"
    required: false
    default: ""
  test-github-client-id:
    description: "GitHub Client ID in test environment"
    required: false
    default: ""
  test-github-client-secret:
    description: "GitHub Client Secret in test environment"
    required: false
    default: ""
  prod-azureidir-tenant-id:
    description: "Azure IDIR Tenant ID in prod environment"
    required: false
    default: ""
  prod-azureidir-client-id:
    description: "Azure IDIR Client ID in prod environment"
    required: false
    default: ""
  prod-azureidir-client-secret:
    description: "Azure IDIR Client Secret in prod environment"
    required: false
    default: ""
  prod-github-client-id:
    description: "GitHub Client ID in prod environment"
    required: false
    default: ""
  prod-github-client-secret:
    description: "GitHub Client Secret in prod environment"
    required: false
    default: ""

  plan:
    description: "Whether to run Terraform plan"
    required: false
    default: "false"
  apply:
    description: "Whether to run Terraform apply"
    required: false
    default: "false"
  state-rm:
    description: "Resource address to remove the state"
    required: false
    default: ""

outputs:
  init:
    description: "Terraform init outcome"
    value: ${{ steps.init.outcome }}
  fmt:
    description: "Terraform fmt outcome"
    value: ${{ steps.fmt.outcome }}
  plan:
    description: "Terraform plan outcome"
    value: ${{ steps.plan.outcome }}
  apply:
    description: "Terraform apply outcome"
    value: ${{ steps.apply.outcome }}

runs:
  using: composite
  steps:
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ inputs.tf-version }}

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      shell: bash
      working-directory: ${{ inputs.context }}

    - name: Terraform Variables
      run: |
        cat >"config.tf" <<EOF
        terraform {
          backend "s3" {
            bucket         = "${{ inputs.tf-s3-bucket }}"
            key            = "${{ inputs.tf-s3-bucket-key }}"
            region         = "ca-central-1"
            dynamodb_table = "${{ inputs.tf-s3-dynamodb-table }}"
            access_key     = "${{ inputs.tf-s3-access-key }}"
            secret_key     = "${{ inputs.tf-s3-secret-key }}"
            role_arn       = "${{ inputs.tf-s3-role-arn }}"
          }
          required_providers {
            keycloak = {
              source  = "mrparkers/keycloak"
              version = "${{ inputs.kc-provider-version }}"
            }
          }
        }
        EOF

        cat >"ci.auto.tfvars" <<EOF
        dev_keycloak_url="${{ inputs.kc-dev-url }}"
        test_keycloak_url="${{ inputs.kc-test-url }}"
        prod_keycloak_url="${{ inputs.kc-prod-url }}"
        dev_client_secret="${{ inputs.kc-dev-secret }}"
        test_client_secret="${{ inputs.kc-test-secret }}"
        prod_client_secret="${{ inputs.kc-prod-secret }}"
        test_siteminder_signing_certificate="${{ inputs.test-siteminder-signing-certificate }}"
        prod_siteminder_signing_certificate="${{ inputs.prod-siteminder-signing-certificate }}"
        dev_azureidir_tenant_id="${{ inputs.dev-azureidir-tenant-id }}"
        dev_azureidir_client_id="${{ inputs.dev-azureidir-client-id }}"
        dev_azureidir_client_secret="${{ inputs.dev-azureidir-client-secret }}"
        dev_github_client_id="${{ inputs.dev-github-client-id }}"
        dev_github_client_secret="${{ inputs.dev-github-client-secret }}"
        test_azureidir_tenant_id="${{ inputs.test-azureidir-tenant-id }}"
        test_azureidir_client_id="${{ inputs.test-azureidir-client-id }}"
        test_azureidir_client_secret="${{ inputs.test-azureidir-client-secret }}"
        test_github_client_id="${{ inputs.test-github-client-id }}"
        test_github_client_secret="${{ inputs.test-github-client-secret }}"
        prod_azureidir_tenant_id="${{ inputs.prod-azureidir-tenant-id }}"
        prod_azureidir_client_id="${{ inputs.prod-azureidir-client-id }}"
        prod_azureidir_client_secret="${{ inputs.prod-azureidir-client-secret }}"
        prod_github_client_id="${{ inputs.prod-github-client-id }}"
        prod_github_client_secret="${{ inputs.prod-github-client-secret }}"
        EOF
      shell: bash
      working-directory: ${{ inputs.context }}

    - name: Terraform Init
      id: init
      run: terraform init -upgrade
      shell: bash
      working-directory: ${{ inputs.context }}

    - name: Terraform Plan
      if: inputs.plan == 'true'
      id: plan
      run: terraform plan -no-color
      shell: bash
      working-directory: ${{ inputs.context }}

    - name: Terraform Apply
      if: inputs.apply == 'true'
      id: apply
      run: terraform apply -auto-approve
      shell: bash
      working-directory: ${{ inputs.context }}

    # see https://www.terraform.io/cli/commands/state/rm
    - name: Terraform State Remove
      if: inputs.state-rm != ''
      id: remove
      run: |
        address=${{ inputs.state-rm }}
        echo "$address"
        terraform state rm "$address"
      shell: bash
      working-directory: ${{ inputs.context }}
